/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <rpi_pico/rp2040.dtsi>
#include <freq.h>
#include "vault35-pinctl.dtsi"
#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,console = &cdc_acm_uart;
        zephyr,code-partition = &code_partition;
        zmk,kscan = &kscan;
        zmk,matrix_transform = &transform_2_bars;
    };

    xtal_clk: xtal-clk {
		compatible = "fixed-clock";
		clock-frequency = <12000000>;
		#clock-cells = <0>;
	};

    // 2 x 3u or  2.25u-2.75u
    transform_2_bars: transform_2_bars {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <11>;
        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
        RC(3,1)                 RC(3,3)                 RC(3,5)                 RC(3,7) 
        >;
    };

    // All the 4 mini bars layouts
    transform_4_bars: transform_4_bars {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <11>;
        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
        RC(3,1)         RC(3,2) RC(3,3)                 RC(3,5) RC(3,6)         RC(3,7) 
        >;
    };

    // Big bar 
    transform_big_bar: transform_big_bar {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <11>;
        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
        RC(3,1)                         RC(3,4)                                 RC(3,7) 
        >;
    };

    // hhkb 3u center bar 
    transform_center_3u_bar: transform_center_3u_bar {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <11>;
        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
        RC(3,1)         RC(3,2)         RC(3,4)                 RC(3,6)         RC(3,7) 
        >;
    };

    kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";

        col-gpios
        = <&gpio0 0  (GPIO_ACTIVE_HIGH)>
        , <&gpio0 29 (GPIO_ACTIVE_HIGH)>
        , <&gpio0 17 (GPIO_ACTIVE_HIGH)>
        , <&gpio0 28 (GPIO_ACTIVE_HIGH)>
        , <&gpio0 27 (GPIO_ACTIVE_HIGH)>
        , <&gpio0 26 (GPIO_ACTIVE_HIGH)>
        , <&gpio0 25 (GPIO_ACTIVE_HIGH)>
        , <&gpio0 24 (GPIO_ACTIVE_HIGH)>
        , <&gpio0 3  (GPIO_ACTIVE_HIGH)>
        , <&gpio0 2  (GPIO_ACTIVE_HIGH)>
        , <&gpio0 6  (GPIO_ACTIVE_HIGH)>
        ;
        row-gpios
        = <&gpio0 7  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpio0 1  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpio0 23 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpio0 22 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ;
    };

    encoder: encoder {
        compatible = "alps,ec11";
        a-gpios = <&gpio0 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&gpio0 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <80>;
        status = "disabled";
    };

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&encoder>;
        triggers-per-rotation = <20>;
    };
};

&flash0 {
	/* 16MB of flash minus the 0x100 used for
	 * the second stage bootloader
	 */
	reg = <0x10000000 DT_SIZE_M(16)>;

	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		/* Reserved memory for the second stage bootloader */
		second_stage_bootloader: partition@0 {
			label = "second_stage_bootloader";
			reg = <0x00000000 0x100>;
			read-only;
		};

		/*
		 * Usable flash. Starts at 0x100, after the bootloader. The partition
		 * size is 16MB minus the 0x100 bytes taken by the bootloader.
		 */
		code_partition: partition@100 {
			label = "code-partition";
			reg = <0x100 (DT_SIZE_M(16) - 0x100)>;
			read-only;
		};
	};
};

&usbd {
    status = "okay";
    cdc_acm_uart: cdc_acm_uart {
        compatible = "zephyr,cdc-acm-uart";
    };
};

&gpio0 {
    status = "okay";
};

zephyr_udc0: &usbd {
	status = "okay";
};

&spi0 {
	status = "okay";
	pinctrl-0 = <&spi0_default>;
	pinctrl-names = "default";
	clock-frequency = <DT_FREQ_M(2)>;
};